demo
demo()
load("C:/Users/gruia/Desktop/FMI/Anul II/ProbStat/Ex. LAB/.RData")
fourWeeks = matrix(c(106, 123, 123, 111, 125, 113, 130,
113, 114, 100, 120, 130, 118, 114,
127, 112, 121, 114, 120, 119, 127,
114, 108, 127, 131, 157, 102, 133), 4, 7, byrow = TRUE)
colnames(fourWeeks) = c("L", "Ma", "Mi", "J", "V", "S", "D")
rownames(fourWeeks) = c("S1", "S2", "S3", "S4")
names(colnames(fourWeeks)) = c("Luni", "Marti", "Miercuri", "Joi", "Vineri", "Sambata", "Duminica")
sumDays = colSums(fourWeeks)
maxDay = max(sumDays)
indMaxDay = which(sumDays == maxDay)
dMax = names(indMaxDay)
minDay = min(sumDays)
indMinDay = which(sumDays == minDay)
dMin = names(indMinDay)
values = which(fourWeeks > 120, arr.ind = TRUE, useNames = TRUE)
selection120 = data.frame(Week = rownames(fourWeeks)[values[, 1]],
Day = colnames(fourWeeks)[values[, 2]])
selection120 = selection120[order(selection120[, 1], selection120[, 2]), ]
print(fourWeeks)
print(values)
cat("Cel mai mult s-a vorbit in zilele de", names(which(colnames(fourWeeks) == dMax)), "\n")
cat("Cel mai putin s-a vorbit in zilele de", names(which(colnames(fourWeeks) == dMin)), "\n")
cat("Zilele in care s-a vorbit > 120 min sunt: ")
print(selection120)
View(fourWeeks)
View(selection120)
View(selection120)
data(mtcars)
View(mtcars)
transmissionA = (mtcars[which(mtcars$am == 0), ])[, 6]
transmissionM = (mtcars[which(mtcars$am == 1), ])[, 6]
meanTransmissionA = mean(transmissionA)
meanTransmissionM = mean(transmissionM)
cat("Greutatea medie a masinilor cu Transmisie Automata:", meanTransmissionA, "\n")
cat("Greutatea medie a masinilor cu Transmisie Manuala:", meanTransmissionM, "\n")
sel = mtcars[, c(9, 2, 1)]
transmissionTypes = unique(sel[, 1])
cylinderTypes = unique(sel[, 2])
cylNames = c("4 cyl", "6 cyl", "8 cyl")
trNames = c("automat", "manual")
fr = data.frame(matrix(nrow = length(transmissionTypes), ncol = length(cylinderTypes)))
rownames(fr) = trNames
colnames(fr) = cylNames
for(i in 1:length(transmissionTypes))
for(j in 1:length(cylinderTypes))
fr[i, j] = mean((sel[which(sel$am == transmissionTypes[i] & sel$cyl == cylinderTypes[j]), ])[, 3])
cat("Media consumului masinilor, in functie de tipul transmisiei si al nr. cilindrilor:")
print(fr)
View(sel)
View(fr)
funM = function(i, j)
{
res = 1/ (sqrt(abs(i - j) + 1))
}
funN = function(i, j)
{
res = i/ (j ^ 2)
}
i = 1:10
j = 1:10
matM = outer(i, j, funM)
matN = outer(i, j, funN)
colnames(matM) = i
rownames(matM) = j
colnames(matN) = i
rownames(matN) = j
View(matM)
View(matN)
rng(0,'test laborator');
a = 0.3;
b = 1;
y = a.*randn(100, 1) + b;
rng(0,'test laborator');
a = 0.3;
b = 1;
y = a*randn(100, 1) + b;
set.seed(123)
norm <- rnorm(100, 1, 0.3)
norm
norm <- rnorm(100, 1, 0.3)
norm
norm <- rnorm(100, 1, 0.3)
norm
print(mean(norm))
print(median(norm))
norm <- rnorm(100, 1, 0.3)
norm
print(mean(norm))
print(median(norm))
norm <- rnorm(100, 1, 0.3)
norm
print(mean(norm))
print(median(norm))
norm <- rnorm(100, 1, 0.3)
norm
print(mean(norm))
print(median(norm))
norm <- rnorm(100, 1, 0.3)
norm
print(mean(norm))
print(median(norm))
norm <- rnorm(100, 1, 0.3)
norm
print(mean(norm))
print(median(norm))
norm <- rnorm(100, 1, 0.3)
norm
print(mean(norm))
print(median(norm))
# exercitiul 3 R
v <- rnorm(100, 1, 0.3)
print(v)
meanv = mean(v)
print(meanv)
medianv = median(v)
print(medianv)
getmode <- function(v)
{
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
modev = getmode(v)
print(modev)
# exercitiul 3 R
v <- rnorm(100, 1, 0.3)
print(v)
meanv = mean(v)
print(meanv)
medianv = median(v)
print(medianv)
getmode <- function(v)
{
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
modev = getmode(v)
print(modev)
v <- rnorm(numbers = 100, mean = 1, sd = 0.3)
print(v)
meanv = mean(v)
print(meanv)
medianv = median(v)
print(medianv)
getmode <- function(v)
{
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
modev = getmode(v)
print(modev)
# exercitiul 3 R
v <- rnorm(100, mean = 1, sd = 0.3)
print(v)
meanv = mean(v)
print(meanv)
medianv = median(v)
print(medianv)
getmode <- function(v)
{
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
modev = getmode(v)
print(modev)
# exercitiul 3 R
v <- rnorm(100, mean = 10, sd = 3)
print(v)
meanv = mean(v)
print(meanv)
medianv = median(v)
print(medianv)
getmode <- function(v)
{
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
modev = getmode(v)
print(modev)
v <- rnorm(100, mean = 1, sd = 0.3)
print(v)
meanv = mean(v)
print(meanv)
medianv = median(v)
print(medianv)
getmode <- function(v)
{
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
modev = getmode(v)
print(modev)
# exercitiul 3 R
v = rnorm(100, mean = 1, sd = 0.3)
v = trunc(v*10^3)/10^3
print(v)
meanv = mean(v)
print(meanv)
medianv = median(v)
print(medianv)
getmode = function(v)
{
uniqv = unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
modev = getmode(v)
print(modev)
# exercitiul 3 R
v = rnorm(100, mean = 1, sd = 0.3)
v = trunc(v*10^2)/10^2
print(v)
meanv = mean(v)
print(meanv)
medianv = median(v)
print(medianv)
getmode = function(v)
{
uniqv = unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
modev = getmode(v)
print(modev)
# exercitiul 3 R
v = rnorm(100, mean = 1, sd = 0.3)
v = trunc(v*10^2)/10^2
print(v)
meanv = mean(v)
print(meanv)
medianv = median(v)
print(medianv)
getmode = function(v)
{
uniqv = unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
modev = getmode(v)
print(modev)
# Give the chart file a name.
png(file = "histogram.png")
# Create the histogram.
hist(v, xlab = "Value", col = "gold", border = "red")
# Save the file.
dev.off()
# exercitiul 3 R
# vectorul v cu valorile cerute
v = rnorm(100, mean = 1, sd = 0.3)
v = trunc(v*10^2)/10^2
print(v)
# media lui v
meanv = mean(v)
print(meanv)
# mediana lui v
medianv = median(v)
print(medianv)
# moda lui v
getmode = function(v)
{
uniqv = unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
modev = getmode(v)
print(modev)
# Give the chart file a name.
png(file = "histogram.png")
# Create the histogram.
hist(v, xlab = "Value", col = "gold", border = "red")
# Save the file.
dev.off()
# Give the chart file a name.
png(file = "histogram.png")
# Create the histogram.
hist(v, xlab = "Value", col = "blue", border = "red")
# Save the file.
dev.off()
setwd("C:/Users/gruia/Desktop/FMI/Anul II/ProbStat/Ex. LAB")
# Give the chart file a name.
png(file = "histogram.png")
# Create the histogram.
hist(v, xlab = "Value", col = "blue", border = "red")
# Save the file.
dev.off()
# Give the chart file a name.
png(file = "histogram.png")
# Create the histogram.
hist(v, xlab = "Value", col = "blue", border = "red")
# Save the file.
dev.off()
# Give the chart file a name.
png(file = "histogram.png")
# Create the histogram.
hist(v, xlab = "Value", col = "gold", border = "white")
# Save the file.
dev.off()
# Give the chart file a name.
png(file = "histogram.png")
# Create the histogram.
hist(v, xlab = "Value", col = "gold", border = "white", xlim = c(0,2))
# Save the file.
dev.off()
# Give the chart file a name.
png(file = "histogram.png")
# Create the histogram.
hist(v, xlab = "Value", col = "gold", border = "white", xlim = c(0.00, 2.00))
# Save the file.
dev.off()
# Give the chart file a name.
png(file = "histogram.png")
# Create the histogram.
hist(v, xlab = "Value", col = "gold", border = "white", xlim = c(0, 2))
# Save the file.
dev.off()
funM = function(i,j)
{
1 / sqrt((i+2) * (j+2))
}
funN = function(i,j)
{
(i+1) / (j+1)
}
nrLines = 1:15
nrColumns = 1:15
M = outer(nrLines, nrColumns, funM)
N = outer(nrLines, nrColumns, funN)
MN = M %*% N
detMN = det(MN)
if(detMN == 0) {
print("NEinversabila")
} else {
print("inversabila")
}
View(MN)
View(M)
# exercitiul 4 R
nrLines = 1:15
nrColumns = 1:15
funM = function(i,j)    # creeaza matricea M
{
1 / sqrt((i+2) * (j+2))
}
funN = function(i,j)    # creeaza matricea N
{
(i+1) / (j+1)
}
M = outer(nrLines, nrColumns, funM)
N = outer(nrLines, nrColumns, funN)
MN = M * N            # creeaza matricea M*N
detMN = det(MN)
if(detMN == 0) {
print("NEinversabila")
} else {
print("inversabila")
}
# exercitiul 4 R
nrLines = 1:15
nrColumns = 1:15
funM = function(i,j)    # creeaza matricea M
{
1 / sqrt((i+2) * (j+2))
}
funN = function(i,j)    # creeaza matricea N
{
(i+1) / (j+1)
}
M = outer(nrLines, nrColumns, funM)
N = outer(nrLines, nrColumns, funN)
MN = M * N            # creeaza matricea M*N
detMN = det(MN)
if(detMN == 0) {
print("NEinversabila")
} else {
print("inversabila")
}
# exercitiul 4 R
nrLines = 1:15
nrColumns = 1:15
funM = function(i,j)    # creeaza matricea M
{
1 / sqrt((i+2) * (j+2))
}
funN = function(i,j)    # creeaza matricea N
{
(i+1) / (j+1)
}
M = outer(nrLines, nrColumns, funM)
N = outer(nrLines, nrColumns, funN)
MN = M * N            # creeaza matricea M*N
detMN = det(MN)
if(detMN == 0) {
print("NEinversabila")
} else {
print("inversabila")
}
